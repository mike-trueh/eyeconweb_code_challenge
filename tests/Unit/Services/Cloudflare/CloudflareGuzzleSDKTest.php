<?php

namespace Tests\Unit\Services\Cloudflare;

use App\Services\Cloudflare\CloudflareApiInterface;
use App\Services\Cloudflare\CloudflareGuzzleSDK;
use App\Services\Cloudflare\Exceptions\CloudflareException;
use Cloudflare\API\Adapter\ResponseException;
use Illuminate\Foundation\Testing\WithFaker;
use Mockery;
use Mockery\MockInterface;
use Tests\TestCase;

class CloudflareGuzzleSDKTest extends TestCase
{
    use WithFaker;

    public CloudflareApiInterface $service;

    public function test_auth_methods()
    {
        $this->expectException(CloudflareException::class);
        $this->service->validateCredentials();
    }

    public function test_validate_credentials_method()
    {
        $mock = $this->partialMock(CloudflareGuzzleSDK::class, function (MockInterface $mock) {
            return $mock->shouldReceive('performValidateRequest')->twice()->andThrow(ResponseException::class);
        });

        $mock->setToken($this->faker->uuid());
        $this->assertFalse($mock->validateCredentials());

        $mock->setApiKey($this->faker->safeEmail(), $this->faker->uuid());
        $this->assertFalse($mock->validateCredentials());

        $mock = $this->partialMock(CloudflareGuzzleSDK::class, function (MockInterface $mock) {
            return $mock->shouldReceive('performValidateRequest')->twice()->andReturn(true);
        });

        $mock->setToken($this->faker->uuid());
        $this->assertTrue($mock->validateCredentials());

        $mock->setApiKey($this->faker->safeEmail(), $this->faker->uuid());
        $this->assertTrue($mock->validateCredentials());
    }

    public function test_zone_object_to_array_conversion()
    {
        $mock = $this->partialMock(CloudflareGuzzleSDK::class, function (MockInterface $mock) {
            return $mock->shouldAllowMockingProtectedMethods()->shouldReceive('performZonesRequest')->once()->andReturn($this->makeZoneObject(3));
        });

        $mock->setToken($this->faker->uuid());
        $domains = $mock->getDomains();

        $this->assertArrayHasKey('result', $domains);
        $this->assertArrayHasKey('result_info', $domains);
        $this->assertCount(3, $domains['result']);
        $this->assertArrayHasKey('external_id', $domains['result'][0]);
    }

    public function makeZoneObject(int $domains = 0, int $page = 1, int $totalPages = 1)
    {
        return json_decode(json_encode($this->getDomainsResult($domains, $page, $totalPages), JSON_FORCE_OBJECT));
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->service = new CloudflareGuzzleSDK();
    }

    protected function tearDown(): void
    {
        Mockery::close();
    }
}
